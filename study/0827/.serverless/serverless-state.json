{
  "service": {
    "service": "text-blog-service",
    "serviceObject": {
      "name": "text-blog-service"
    },
    "provider": {
      "name": "aws",
      "runtime": "nodejs18.x",
      "region": "ap-northeast-2",
      "iamRoleStatements": [
        {
          "Effect": "Allow",
          "Action": [
            "dynamodb:Scan",
            "dynamodb:GetItem",
            "dynamodb:PutItem",
            "dynamodb:UpdateItem",
            "dynamodb:DeleteItem"
          ],
          "Resource": "arn:aws:dynamodb:ap-northeast-2:654654611599:table/BlogPosts0827"
        }
      ],
      "stage": "dev",
      "versionFunctions": true,
      "compiledCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "CreatePostLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/text-blog-service-dev-createPost"
            }
          },
          "GetPostLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/text-blog-service-dev-getPost"
            }
          },
          "ListPostsLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/text-blog-service-dev-listPosts"
            }
          },
          "UpdatePostLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/text-blog-service-dev-updatePost"
            }
          },
          "DeletePostLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/text-blog-service-dev-deletePost"
            }
          },
          "IamRoleLambdaExecution": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": [
                        "lambda.amazonaws.com"
                      ]
                    },
                    "Action": [
                      "sts:AssumeRole"
                    ]
                  }
                ]
              },
              "Policies": [
                {
                  "PolicyName": {
                    "Fn::Join": [
                      "-",
                      [
                        "text-blog-service",
                        "dev",
                        "lambda"
                      ]
                    ]
                  },
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:CreateLogStream",
                          "logs:CreateLogGroup",
                          "logs:TagResource"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/text-blog-service-dev*:*"
                          }
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:PutLogEvents"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/text-blog-service-dev*:*:*"
                          }
                        ]
                      },
                      {
                        "$ref": "$[\"service\"][\"provider\"][\"iamRoleStatements\"][0]"
                      }
                    ]
                  }
                }
              ],
              "Path": "/",
              "RoleName": {
                "Fn::Join": [
                  "-",
                  [
                    "text-blog-service",
                    "dev",
                    {
                      "Ref": "AWS::Region"
                    },
                    "lambdaRole"
                  ]
                ]
              }
            }
          },
          "CreatePostLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-ap-northeast-2-511e10df-e2ad",
                "S3Key": "serverless/text-blog-service/dev/1756265842923-2025-08-27T03:37:22.923Z/text-blog-service.zip"
              },
              "Handler": "create.handler",
              "Runtime": "nodejs18.x",
              "FunctionName": "text-blog-service-dev-createPost",
              "MemorySize": 1024,
              "Timeout": 6,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "CreatePostLogGroup"
            ]
          },
          "GetPostLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-ap-northeast-2-511e10df-e2ad",
                "S3Key": "serverless/text-blog-service/dev/1756265842923-2025-08-27T03:37:22.923Z/text-blog-service.zip"
              },
              "Handler": "get.handler",
              "Runtime": "nodejs18.x",
              "FunctionName": "text-blog-service-dev-getPost",
              "MemorySize": 1024,
              "Timeout": 6,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetPostLogGroup"
            ]
          },
          "ListPostsLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-ap-northeast-2-511e10df-e2ad",
                "S3Key": "serverless/text-blog-service/dev/1756265842923-2025-08-27T03:37:22.923Z/text-blog-service.zip"
              },
              "Handler": "list.handler",
              "Runtime": "nodejs18.x",
              "FunctionName": "text-blog-service-dev-listPosts",
              "MemorySize": 1024,
              "Timeout": 6,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "ListPostsLogGroup"
            ]
          },
          "UpdatePostLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-ap-northeast-2-511e10df-e2ad",
                "S3Key": "serverless/text-blog-service/dev/1756265842923-2025-08-27T03:37:22.923Z/text-blog-service.zip"
              },
              "Handler": "update.handler",
              "Runtime": "nodejs18.x",
              "FunctionName": "text-blog-service-dev-updatePost",
              "MemorySize": 1024,
              "Timeout": 6,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "UpdatePostLogGroup"
            ]
          },
          "DeletePostLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-ap-northeast-2-511e10df-e2ad",
                "S3Key": "serverless/text-blog-service/dev/1756265842923-2025-08-27T03:37:22.923Z/text-blog-service.zip"
              },
              "Handler": "delete.handler",
              "Runtime": "nodejs18.x",
              "FunctionName": "text-blog-service-dev-deletePost",
              "MemorySize": 1024,
              "Timeout": 6,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "DeletePostLogGroup"
            ]
          },
          "CreatePostLambdaVersionCAdFEOTJ0bvMUAlVg4reGaG67u5o5wqAfwwsiVQV24": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "CreatePostLambdaFunction"
              },
              "CodeSha256": "0TI1rTYpvWqxRR/SxTo8gXqqpfxEdziBct0Ua7HL3HA="
            }
          },
          "GetPostLambdaVersionDvsyxVF6Dl1PKPzTERivibo4juIR3I2xAqcagSljY": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetPostLambdaFunction"
              },
              "CodeSha256": "0TI1rTYpvWqxRR/SxTo8gXqqpfxEdziBct0Ua7HL3HA="
            }
          },
          "ListPostsLambdaVersion30j6tohjt0RdWr4fgo4kRrVSVgd1810CBqmfNnU": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "ListPostsLambdaFunction"
              },
              "CodeSha256": "0TI1rTYpvWqxRR/SxTo8gXqqpfxEdziBct0Ua7HL3HA="
            }
          },
          "UpdatePostLambdaVersion1gbUnjxzj2B07FB2tjGlm6028L7s1JeKIKjwoZLUhE": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "UpdatePostLambdaFunction"
              },
              "CodeSha256": "0TI1rTYpvWqxRR/SxTo8gXqqpfxEdziBct0Ua7HL3HA="
            }
          },
          "DeletePostLambdaVersiono4HUHNDfqd76bcB8861xgG2GfjtuL5mKXDPrnj1nw": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "DeletePostLambdaFunction"
              },
              "CodeSha256": "0TI1rTYpvWqxRR/SxTo8gXqqpfxEdziBct0Ua7HL3HA="
            }
          },
          "ApiGatewayRestApi": {
            "Type": "AWS::ApiGateway::RestApi",
            "Properties": {
              "Name": "dev-text-blog-service",
              "EndpointConfiguration": {
                "Types": [
                  "EDGE"
                ]
              },
              "Policy": ""
            }
          },
          "ApiGatewayResourcePosts": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "posts",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourcePostsIdVar": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourcePosts"
              },
              "PathPart": "{id}",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodPostsPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourcePosts"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "CreatePostLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "CreatePostLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodPostsIdVarGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourcePostsIdVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetPostLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "GetPostLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodPostsGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourcePosts"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "ListPostsLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "ListPostsLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodPostsIdVarPut": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "PUT",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourcePostsIdVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "UpdatePostLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "UpdatePostLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodPostsIdVarDelete": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "DELETE",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourcePostsIdVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "DeletePostLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "DeletePostLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayDeployment1756265836313": {
            "Type": "AWS::ApiGateway::Deployment",
            "Properties": {
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "StageName": "dev"
            },
            "DependsOn": [
              "ApiGatewayMethodPostsPost",
              "ApiGatewayMethodPostsIdVarGet",
              "ApiGatewayMethodPostsGet",
              "ApiGatewayMethodPostsIdVarPut",
              "ApiGatewayMethodPostsIdVarDelete"
            ]
          },
          "CreatePostLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "CreatePostLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "GetPostLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetPostLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "ListPostsLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "ListPostsLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "UpdatePostLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "UpdatePostLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "DeletePostLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "DeletePostLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "BlogPostsTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "BlogPosts0827",
              "AttributeDefinitions": [
                {
                  "AttributeName": "postId",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "postId",
                  "KeyType": "HASH"
                }
              ],
              "BillingMode": "PAY_PER_REQUEST"
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": "serverless-framework-deployments-ap-northeast-2-511e10df-e2ad",
            "Export": {
              "Name": "sls-text-blog-service-dev-ServerlessDeploymentBucketName"
            }
          },
          "CreatePostLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "CreatePostLambdaVersionCAdFEOTJ0bvMUAlVg4reGaG67u5o5wqAfwwsiVQV24"
            },
            "Export": {
              "Name": "sls-text-blog-service-dev-CreatePostLambdaFunctionQualifiedArn"
            }
          },
          "GetPostLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetPostLambdaVersionDvsyxVF6Dl1PKPzTERivibo4juIR3I2xAqcagSljY"
            },
            "Export": {
              "Name": "sls-text-blog-service-dev-GetPostLambdaFunctionQualifiedArn"
            }
          },
          "ListPostsLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "ListPostsLambdaVersion30j6tohjt0RdWr4fgo4kRrVSVgd1810CBqmfNnU"
            },
            "Export": {
              "Name": "sls-text-blog-service-dev-ListPostsLambdaFunctionQualifiedArn"
            }
          },
          "UpdatePostLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "UpdatePostLambdaVersion1gbUnjxzj2B07FB2tjGlm6028L7s1JeKIKjwoZLUhE"
            },
            "Export": {
              "Name": "sls-text-blog-service-dev-UpdatePostLambdaFunctionQualifiedArn"
            }
          },
          "DeletePostLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "DeletePostLambdaVersiono4HUHNDfqd76bcB8861xgG2GfjtuL5mKXDPrnj1nw"
            },
            "Export": {
              "Name": "sls-text-blog-service-dev-DeletePostLambdaFunctionQualifiedArn"
            }
          },
          "ServiceEndpoint": {
            "Description": "URL of the service endpoint",
            "Value": {
              "Fn::Join": [
                "",
                [
                  "https://",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  ".execute-api.",
                  {
                    "Ref": "AWS::Region"
                  },
                  ".",
                  {
                    "Ref": "AWS::URLSuffix"
                  },
                  "/dev"
                ]
              ]
            },
            "Export": {
              "Name": "sls-text-blog-service-dev-ServiceEndpoint"
            }
          }
        }
      },
      "vpc": {}
    },
    "pluginsData": {},
    "functions": {
      "createPost": {
        "handler": "create.handler",
        "events": [
          {
            "http": {
              "path": "posts",
              "method": "post",
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "text-blog-service-dev-createPost",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "CreatePostLambdaVersionCAdFEOTJ0bvMUAlVg4reGaG67u5o5wqAfwwsiVQV24"
      },
      "getPost": {
        "handler": "get.handler",
        "events": [
          {
            "http": {
              "path": "posts/{id}",
              "method": "get",
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "text-blog-service-dev-getPost",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "GetPostLambdaVersionDvsyxVF6Dl1PKPzTERivibo4juIR3I2xAqcagSljY"
      },
      "listPosts": {
        "handler": "list.handler",
        "events": [
          {
            "http": {
              "path": "posts",
              "method": "get",
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "text-blog-service-dev-listPosts",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "ListPostsLambdaVersion30j6tohjt0RdWr4fgo4kRrVSVgd1810CBqmfNnU"
      },
      "updatePost": {
        "handler": "update.handler",
        "events": [
          {
            "http": {
              "path": "posts/{id}",
              "method": "put",
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "text-blog-service-dev-updatePost",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "UpdatePostLambdaVersion1gbUnjxzj2B07FB2tjGlm6028L7s1JeKIKjwoZLUhE"
      },
      "deletePost": {
        "handler": "delete.handler",
        "events": [
          {
            "http": {
              "path": "posts/{id}",
              "method": "delete",
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "text-blog-service-dev-deletePost",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "DeletePostLambdaVersiono4HUHNDfqd76bcB8861xgG2GfjtuL5mKXDPrnj1nw"
      }
    },
    "resources": {
      "Resources": {
        "BlogPostsTable": {
          "Type": "AWS::DynamoDB::Table",
          "Properties": {
            "TableName": "BlogPosts0827",
            "AttributeDefinitions": [
              {
                "AttributeName": "postId",
                "AttributeType": "S"
              }
            ],
            "KeySchema": [
              {
                "AttributeName": "postId",
                "KeyType": "HASH"
              }
            ],
            "BillingMode": "PAY_PER_REQUEST"
          }
        }
      },
      "Outputs": {}
    },
    "configValidationMode": "warn",
    "serviceFilename": "serverless",
    "initialServerlessConfig": {
      "service": "text-blog-service",
      "provider": {
        "$ref": "$[\"service\"][\"provider\"]"
      },
      "functions": {
        "$ref": "$[\"service\"][\"functions\"]"
      },
      "resources": {
        "$ref": "$[\"service\"][\"resources\"]"
      }
    },
    "appId": null,
    "orgId": null,
    "layers": {},
    "artifact": "D:\\GenAI_lyj\\git_workspace\\yongjun1994\\study\\0827\\.serverless\\text-blog-service.zip"
  },
  "package": {
    "artifactDirectoryName": "serverless/text-blog-service/dev/1756265842923-2025-08-27T03:37:22.923Z",
    "artifact": "text-blog-service.zip"
  }
}